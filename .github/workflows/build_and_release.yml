name: Build, Test and Release

on:
  push:
    tags:
      - "*.*.*"

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    steps:
      - uses: actions/checkout@v2

      - name: Get the version # get the version from the tag
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.10' # python version used for build
          cache: 'pip'
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip

      - name: Install Dependencies
        run: |
          python -m pip install -r requirements.txt

      - name: Build app
        run: |
          python build.py --version ${{ steps.get_version.outputs.VERSION }} --nodebug
        if: runner.os == 'Linux' || runner.os == 'Windows'

      - name: Build app (dirmode)
        run: |
          python build.py --version ${{ steps.get_version.outputs.VERSION }} --nodebug --dirmode
        if: runner.os == 'macOS' || runner.os == 'Windows'

      - name: Linux - install and launch xvfb (GUI on Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xinput0 libxcb-xfixes0
          sudo /usr/bin/Xvfb $DISPLAY -screen 0 1280x1024x24 & # start xvfb on (default) display :0

      - name: Linux - rename, repair and test run
        if: runner.os == 'Linux'
        run: |
          ls
          ls ./dist
          echo "renaming ..."
          mv ./dist/WatermarkRemover ./dist/WatermarkRemover-linux
          ls
          ls ./dist
          echo "adding permission ..."
          chmod +x ./dist/WatermarkRemover-linux
          echo "running ./scripts/run_unix.sh ..."
          ./scripts/run_unix.sh -e "./dist/WatermarkRemover-linux" -t 30; echo $?
          echo "done"
        env:
          DISPLAY: ":0" # set DISPLAY to :0 to run on (default) display

      - name: macOS - Install coreutils (for timeout cmd)
        if: runner.os == 'macOS'
        run: brew install coreutils

      #      - name: macOS - Rename, repair and test run (CLI)
      #        if: runner.os == 'macOS'
      #        run: |
      #          ls
      #          ls ./dist
      #          echo "renaming ..."
      #          mv ./dist/WatermarkRemover ./dist/WatermarkRemover-macos
      #          ls
      #          ls ./dist
      #          echo "adding permission ..."
      #          chmod +x ./dist/WatermarkRemover-macos
      #          echo "running ./scripts/run_unix.sh ..."
      #          ./scripts/run_unix.sh -e "./dist/WatermarkRemover-macos" -t 30; echo $?
      #          echo "done"

      - name: macOS - Rename, repair and test run (.app bundle)
        if: runner.os == 'macOS'
        run: |
          ls
          ls ./dist
          echo "adding permission ..."
          chmod +x ./dist/WatermarkRemover.app/Contents/MacOS/WatermarkRemover
          echo "running ./scripts/run_unix.sh ..."
          ./scripts/run_unix.sh -a "./dist/WatermarkRemover.app/" -t 30; echo $?
          echo "done"

      - name: Windows - Rename, repair and test run (.exe)
        if: runner.os == 'Windows'
        run: |
          DIR
          DIR .\dist
          ECHO running .\scripts\run_win.bat ...
          .\scripts\run_win.bat .\dist\WatermarkRemover.exe 30
          ECHO %ERRORLEVEL%
          ECHO done
        shell: cmd

      - name: Create installer (using NSIS)
        uses: joncloud/makensis-action@v3.3
        with:
          script-file: installer.nsi
        if: runner.os == 'Windows'

      - name: Move installer to dist folder
        run: mv WatermarkRemover-installer.exe dist/WatermarkRemover-installer.exe
        if: runner.os == 'Windows'

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}
          path: dist/


  release:
    name: Release
    needs: [ build_and_test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2 # get CHANGELOG.md

      - uses: actions/download-artifact@v2
        with:
          name: ubuntu-latest
          path: ubuntu-latest

      - uses: actions/download-artifact@v2
        with:
          name: windows-latest
          path: windows-latest

      - uses: actions/download-artifact@v2
        with:
          name: macos-latest
          path: macos-latest

      - name: Repair (add permissions)
        run: |
          chmod +x ./ubuntu-latest/WatermarkRemover-linux
          # chmod +x ./macos-latest/WatermarkRemover-macos
          ls ./macos-latest/WatermarkRemover.app/Contents/MacOS/
          chmod +x ./macos-latest/WatermarkRemover.app/Contents/MacOS/WatermarkRemover

      - name: Install zip
        uses: montudor/action-zip@v1

      - name: Zip MAC OS app
        run: zip -qq -r WatermarkRemover-macos.zip WatermarkRemover.app
        working-directory: macos-latest/

      - name: List the files
        run: ls -l && ls -l ubuntu-latest/ && ls -l windows-latest/ && ls -l macos-latest/

      - name: create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body_path: CHANGELOG.md
          files: |
            ubuntu-latest/*
            windows-latest/*
            macos-latest/*
            LICENSE
